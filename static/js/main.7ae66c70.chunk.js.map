{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","onClick","handleRedMode","handleDarkMode","handleLightMode","TextForm","useState","text","settext","style","backgroundColor","onChange","event","console","log","target","value","rows","newtext","toUpperCase","showAlert","toLowerCase","warn","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","Alert","alert","class","role","slice","message","defaultProps","title","aboutText","App","setmode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7ae66c70.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n  \r\n\r\n\r\n    return (\r\n  <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  {/* <Link className=\"navbar-brand\" to=\"/\">Text Utils</Link> */}\r\n  <a className=\"navbar-brand\" href=\"#\">Text Utils</a>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav mr-auto\">\r\n      <li className=\"nav-item active\">\r\n        {/* <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a> */}\r\n      </li>\r\n      {/* <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">About</a>\r\n      </li> */}\r\n      {/* <li className=\"nav-item dropdown\">\r\n        <Link className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n          Dropdown\r\n        </Link>\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n          <a className=\"dropdown-item\" href=\"/\">Action</a>\r\n          <a className=\"dropdown-item\" href=\"/\">Another action</a>\r\n          <div className=\"dropdown-divider\"></div>\r\n          <a className=\"dropdown-item\" href=\"/\">Something else here</a>\r\n        </div>\r\n      </li> */}\r\n      \r\n      \r\n      \r\n      \r\n\r\n    </ul>\r\n    {/* <div className={`custom-control custom-switch text-${props.mode===\"light\"?'dark':'light'}`}>\r\n        <input onClick = {props.handleMode} type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitches\"/>\r\n        <label className=\"custom-control-label\" htmlFor=\"customSwitches\">Enable Dark Mode</label>\r\n      </div> */}\r\n\r\n      <div type = 'button' onClick = {props.handleRedMode} className=\"dot-switch-red\"></div>\r\n      <div  type = 'button' onClick = {props.handleDarkMode} className=\"dot-switch-dark\"></div>\r\n      <div  type = 'button' onClick = {props.handleLightMode} className=\"dot-switch-light\"></div>\r\n\r\n    \r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes= {\r\n    title:  PropTypes.string.isRequired,\r\n    aboutText:  PropTypes.string\r\n}\r\n// Navbar.propTypes= {\r\n//     title:  PropTypes.string.isRequired\r\n//   }\r\nNavbar.defaultProps = {\r\n  title:\"Title here\",\r\n  aboutText:\"About here\"\r\n}","import React , {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    // const handle\r\n    const [text, settext] = useState(\"\");\r\n    const handleUpClick = () =>{\r\n        console.log(\"button was clicked\");\r\n        const  newtext = text.toUpperCase()\r\n\r\n        settext(newtext)\r\n        props.showAlert(\"Text convert to uppercase\",\"success\")\r\n    }\r\n    const handleLoClick = () =>{\r\n        console.log(\"button was clicked\");\r\n        const  newtext = text.toLowerCase()\r\n\r\n        settext(newtext)\r\n        props.showAlert(\"Text convert to lowercase\",\"success\")\r\n    }\r\n    const handleChange=(event)=>{\r\n        console.log(\"ta changed\");\r\n        settext(event.target.value)\r\n    }\r\n    const handleCopy=()=>{\r\n        console.warn(\"copied text\");\r\n        var text = document.getElementById(\"myBox\")\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Text copied\",\"info\")\r\n    }\r\n\r\n    const handleClear = () =>{\r\n        settext(\"\")\r\n        props.showAlert(\"Text Cleared\",\"success\")\r\n    }\r\n\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        settext(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed\",\"success\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <h2>Text to convert</h2>\r\n            <textarea className=\"form-control\" style = {{ backgroundColor: props.mode===\"light\"?'white':'grey'}} id=\"myBox\" onChange={handleChange} rows=\"10\" value = {text} ></textarea>\r\n            <br />\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to uppercase</button>\r\n            <button className=\"btn btn-primary m-2\" onClick={handleLoClick}>Convert to lowercase</button>\r\n            <button className=\"btn btn-primary m-2\" onClick={handleCopy}>Copy text</button>\r\n            <button className=\"btn btn-primary m-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary m-2\" onClick={handleClear}>Reset</button>\r\n\r\n        </div>\r\n        <div className=\"container\">\r\n            <h3>Text analysis</h3>\r\n            <p>Chars = {text.length}</p>\r\n            <p>Words : {text.split(\" \").length}</p>\r\n            <p>Reading time - {(text.split(\" \").length)/125} min</p>\r\n        </div>\r\n        <div className=\"container\">\r\n            <h3>Text preview</h3>\r\n            <p>{text.length>0?text:\"Enter your text to preview here!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const cap = (text) =>{\r\n        const captext = text[0].toUpperCase() + text.slice(1)\r\n        return captext\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div class={`alert alert-${props.alert.type}`} role=\"alert\">\r\n                <strong>{cap(props.alert.type)}</strong> {props.alert.message}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm'\n// import About from './components/About'\nimport { useState } from 'react';\nimport React from \"react\";\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n  \n// } from \"react-router-dom\";\n\nfunction App(props) {\n  const [mode, setmode] = useState(\"light\")\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type) =>{\n    setAlert({\n      type:type,\n      message:message\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1700);\n  }\n\n  // const handleMode = () =>{\n  //   // \n  //   if(mode===\"light\"){\n      \n  //     setmode(\"dark\")\n  //     document.body.style.backgroundColor = \"grey\"\n  //     showAlert(\"Dark mode enabled\",\"success\")\n  //   }\n  //   else{\n  //     setmode(\"light\")   \n  //     document.body.style.backgroundColor = \"white\"\n  //     showAlert(\"Light mode enabled\",\"success\")\n      \n  //   }\n  // }\n\n  const handleRedMode = () =>{\n    \n    setmode(\"red\")\n    document.body.style.backgroundColor = \"rgb(179, 58, 58)\"\n    showAlert(\"Red mode enabled\",\"success\")\n     \n    \n  }\n\n  const handleDarkMode = () =>{\n    // \n    \n      \n    setmode(\"dark\")\n    document.body.style.backgroundColor = \"grey\"\n    showAlert(\"Dark mode enabled\",\"success\")\n    \n    \n      \n  }\n  \n\n  const handleLightMode = () =>{\n    // \n    \n    setmode(\"light\")   \n    document.body.style.backgroundColor = \"white\"\n    showAlert(\"Light mode enabled\",\"success\")\n      \n    \n  }\n\n  return (\n    <>\n    {/* <Navbar title = \"Dinesh's rings\" aboutText = \"About dinesh's site\"/> */}\n    {/* <Navbar  aboutText = \"About dinesh's site\"/> */}\n    \n    {/* removing router for github pages */}\n    \n    {/* <Router> */}\n      <Navbar  mode={mode}  handleRedMode = {handleRedMode} handleDarkMode = {handleDarkMode} handleLightMode={handleLightMode} />\n      <Alert  alert = {alert}/>\n      <div className=\"container my-3\">\n      {/* <Routes> */}\n            {/* <Route exact path=\"/about\" element={<About />}> */}\n            {/* <About /> */}\n            <TextForm  mode={mode} showAlert = {showAlert} />\n            {/* </Route> */}\n            {/* <Route exact path=\"/\" element={<TextForm  mode={mode} showAlert = {showAlert} />}> */}\n            {/* </Route> */}\n      {/* </Routes> */}\n      </div>\n    {/* </Router> */}\n\n      \n      \n    </>\n  );\n  \n}\n  \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}